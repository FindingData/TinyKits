///////////////////////////////////////////////////////////
//  AdoProvider.cs
//  Implementation of the Class AdoProvider
//  Generated by Enterprise Architect
//  Created on:      05-6ÔÂ-2018 16:08:49
//  Original author: drago
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using System.Data;
using FD.Tiny.DataAccess;
using System.Reflection;

namespace FD.Tiny.DataAccess {
	public abstract class AdoProvider : AdoAccessory, IAdo {

		public AdoProvider(){
            this.IsEnableLogEvent = false;
            this.CommandType = CommandType.Text;
            this.IsClearParameters = true;
            this.CommandTimeOut = 30000;
		}

        public abstract string ConnectionString { get;  }

        public abstract IDataParameter[] ToIDbDataParameter(params SugarParameter[] parameters);

        protected List<IDataParameter> OutputParameters { get; set; }

        public abstract IDbCommand GetCommand(string sql, SugarParameter[] parameters);

        public abstract void SetCommandToAdapter(IDataAdapter adapter, IDbCommand command);

        public abstract IDataAdapter GetAdapter();
        public virtual void Dispose(){
            if (this.Transaction!=null)
            {
                this.Transaction.Commit();
                this.Transaction = null;
            }
            if(this.Connection!=null && this.Connection.State!= ConnectionState.Open)
            {
                this.Connection.Close();
            }
            if (this.Connection!=null)
            {
                this.Connection.Dispose();
            }

		}

        /// 
        /// <param name="obj"></param>
        public SugarParameter[] GetParameters(object parameters, PropertyInfo[] propertyInfo = null) { 
            if(parameters == null) return null;
            return base.GetParameters(parameters, propertyInfo, SqlParameterKeyWord);
		}

		public virtual string SqlParameterKeyWord
        {
            get { return ":"; } 
        }

		public virtual IDbConnection Connection{
			get; set;
		}

		/// 
		/// <param name="sql"></param>
		/// <param name="parameters"></param>
		public DataTable GetDataTable(string sql,params SugarParameter[] parameters){
            var ds = this.GetDataSetAll(sql, parameters);
            if (ds.Tables.Count != 0 && ds.Tables.Count > 0) return ds.Tables[0];
			return new DataTable();
		}

		/// 
		/// <param name="sql"></param>
		/// <param name="parameters"></param>
		public virtual int ExecuteCommand(string sql, params SugarParameter[] parameters){
            try
            {
                IDbCommand sqlCommand = GetCommand(sql, parameters);
                int count = sqlCommand.ExecuteNonQuery();
                if (this.IsClearParameters)
                    sqlCommand.Parameters.Clear();
                return count;
            }
            catch (Exception ex)
            {                
                throw ex;
            }           
		}

		public IDbTransaction Transaction{
			get; set;
		}

		public CommandType CommandType{
			get; set;
		}

		public virtual void Open(){
            CheckConnection();
		}

		public virtual void Close(){
            if (this.Transaction!=null)
            {
                this.Transaction = null;
            }
            if(this.Connection!=null && this.Connection.State == ConnectionState.Open)
            {
                this.Connection.Close();
            }            
		}

		public bool IsEnableLogEvent{
			get; set;
		}

		public bool IsClearParameters{
			get; set;
		}

		public virtual void CheckConnection(){
            if (this.Connection.State!= ConnectionState.Open)
            {
                try
                {
                    this.Connection.Open();
                }
                catch (Exception ex)
                {
                    Check.Exception(true, ex.Message);
                }
            }
		}

		public int CommandTimeOut{
			get; set;
		}

		public virtual void BeginTran(){
            CheckConnection();
            this.Transaction = this.Connection.BeginTransaction();
		}

        public virtual void Rollback()
        {
            if(this.Transaction != null)
            {
                this.Transaction.Rollback();
                this.Transaction = null;
            }
        }

		public void Commit(){
            if (this.Transaction != null)
            {
                this.Transaction.Commit();
                this.Transaction = null;
            }
		}

		/// 
		/// <param name="sql"></param>
		/// <param name="parameters"></param>
		public DataSet GetDataSetAll(string sql, object parameters){

            return GetDataSetAll(sql, this.GetParameters(parameters));
		}

		/// 
		/// <param name="sql"></param>
		/// <param name="parameters"></param>
		public DataSet GetDataSetAll(string sql, params SugarParameter[] parameters){
            try
            {
                IDataAdapter dataAdapter = this.GetAdapter();
                IDbCommand sqlCommand = GetCommand(sql, parameters);
                this.SetCommandToAdapter(dataAdapter, sqlCommand);
                DataSet ds = new DataSet();
                dataAdapter.Fill(ds);
                if (this.IsClearParameters)
                {
                    sqlCommand.Parameters.Clear();
                }
                return ds;
            }
            catch (Exception ex)
            {
                throw ex;
            }            
		}

		/// 
		/// <param name="sql"></param>
		/// <param name="parameters"></param>
		public DataTable GetDataTable(string sql, object parameters){
            return this.GetDataTable(sql, this.GetParameters(parameters));			
		}

		/// 
		/// <param name="sql"></param>
		/// <param name="parameters"></param>
		public virtual int ExecuteCommand(string sql, object parameters){

            return ExecuteCommand(sql, GetParameters(parameters));
		}


        internal CommandType OldCommandType { get; set; }
        internal bool OldClearParameters { get; set; }

        public IAdo UseStoredProcedure()
        {
            this.OldCommandType = this.CommandType;
            this.OldClearParameters = this.IsClearParameters;
            this.CommandType = CommandType.StoredProcedure;
            this.IsClearParameters = false;
            return this;
        }



    }//end AdoProvider

}//end namespace FD.Tiny.DataAccess