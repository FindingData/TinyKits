///////////////////////////////////////////////////////////
//  BaseSingleSqlParser .cs
//  Implementation of the Class BaseSingleSqlParser 
//  Generated by Enterprise Architect
//  Created on:      17-11ÔÂ-2018 15:26:08
//  Original author: drago
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;

namespace FD.Tiny.Common.Utility.SqlParse {
    public abstract class BaseSingleSqlParser
    {

        protected string OriginalSql;
        protected List<SqlSegment> Segments;

        /// 
        /// <param name="originalSql"></param>
        public BaseSingleSqlParser(string originalSql)
        {
            this.OriginalSql = originalSql;
            Segments = new List<SqlSegment>();
            initializeSegments();
            SplitSqlToSegment();

        }

        protected void SplitSqlToSegment()
        {
            foreach (var sqlSegment in Segments)
            {
                sqlSegment.Parse(OriginalSql);
            }
        }

        protected abstract void initializeSegments();

        public string GetParsedSql()
        {
            StringBuilder sb = new StringBuilder();
            foreach (var sqlSegment in Segments)
            {
                sb.Append(sqlSegment.GetParsedSqlSegment());
            }
            //var result = sb.ToString().Replace("$+", "\n");
            return sb.ToString();
        }

        public List<SqlSegment> ReturnSqlSegments()
        {
            var segmentLength = this.Segments.Count();
            if (segmentLength != 0)
            {
                var result = this.Segments;
                return result;
            }
            return null;
        }

    }//end BaseSingleSqlParser 

}//end namespace SqlParse