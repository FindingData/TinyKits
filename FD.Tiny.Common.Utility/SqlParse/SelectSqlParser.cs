///////////////////////////////////////////////////////////
//  SelectSqlParser.cs
//  Implementation of the Class SelectSqlParser
//  Generated by Enterprise Architect
//  Created on:      17-11ÔÂ-2018 15:26:08
//  Original author: drago
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



namespace FD.Tiny.Common.Utility.SqlParse {
    public class SelectSqlParser : BaseSingleSqlParser
    {

        /// 
        /// <param name="originalSql"></param>
        public SelectSqlParser(string originalSql) : base(originalSql)
        {

        }

        protected override void initializeSegments()
        {
            Segments.Add(new SqlSegment("(select)(.+)(from)", "([,])"));
            Segments.Add(new SqlSegment("(from)(.+?)(where |group\\s+by|having|order\\s+by | ENDOFSQL)",
                "(,|s+lefts+joins+|s+rights+joins+|s+inners+joins+)"));
            Segments.Add(new SqlSegment("(where)(.+?)(group\\s+by |having| order\\s+by | ENDOFSQL)", "(and|or)"));
            Segments.Add(new SqlSegment("(group\\s+by)(.+?)(having|order\\s+by| ENDOFSQL)", "([,])"));
            Segments.Add(new SqlSegment("(having)(.+?)(order\\s+by| ENDOFSQL)", "(and|or)"));
            Segments.Add(new SqlSegment("(order\\s+by)(.+)( ENDOFSQL)", "([,])"));

            //Segments.Add(new SqlSegment("(select)(.+)(from)", "([,])"));
            //Segments.Add(new SqlSegment("(from)(.+)( where | on | having | group by | order by | ENDOFSQL)",
            //        "(,| left join | right join | inner join )"));
            //Segments.Add(new SqlSegment("(where|on|having)(.+)( group by | order by | ENDOFSQL)", "(and|or)"));
            //Segments.Add(new SqlSegment("(group by)(.+)( order by| ENDOFSQL)", "([,])"));
            //Segments.Add(new SqlSegment("(order by)(.+)( ENDOFSQL)", "([,])"));
        }

    }//end SelectSqlParser

}//end namespace SqlParse