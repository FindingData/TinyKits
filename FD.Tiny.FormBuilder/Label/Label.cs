///////////////////////////////////////////////////////////
//  Label.cs
//  Implementation of the Class Label
//  Generated by Enterprise Architect
//  Created on:      25-12月-2018 11:26:50
//  Original author: drago
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using System.Text.RegularExpressions;
using FD.Tiny.Common.Utility.Calc;
using FD.Tiny.FormBuilder;
using System.Runtime.Serialization;

namespace FD.Tiny.FormBuilder {
    /// <summary>
    /// 表单标签
    /// </summary>     
    public abstract class Label {

		protected const string EXPR_PATTERN = @"(?<=@)[\w\W]+?(?=[\W])";

		/// <summary>
		/// 标签Id
		/// </summary>
		public int label_id{
			get;  set;
		}

		/// <summary>
		/// 表单Id
		/// </summary>
		public int form_id{
			get;  set;
		}

		public Form form{
			get;
									set;
		}

		/// <summary>
		/// 取值
		/// </summary>
		/// <param name="source"></param>
		public virtual string GetValue(Func<string, string> source){

			return this.default_value;
		}

		/// <summary>
		/// 数据类型
		/// </summary>
		public DataType data_type{
			get;  set;
		}

		/// <summary>
		/// 标签中文名
		/// </summary>
		public string label_name_chs{
			get;  set;
		}

		/// <summary>
		/// 默认值
		/// </summary>
		public dynamic default_value{
			get;  set;
		}

		/// <summary>
		/// 标签类型
		/// </summary>
		public LabelType label_type{
			get;
									set;
		}

		/// <summary>
		/// 标签配置
		/// </summary>
		public LabelConfig label_config{
			get;
									set;
		}

		/// <summary>
		/// 计算表达式
		/// </summary>
		/// <param name="val"></param>
		public string CalcExpression(Func<string, string> source){

			var expr = this.inner_value;
			var matchs = Regex.Matches(expr, EXPR_PATTERN);
			foreach (Match match in matchs)
			{
			    var operand = match.Value;
			    expr = expr.Replace($"@{operand}", source(operand));
			}
			this.inner_value = CalcStringExpression.CalcByJs(expr);
			return this.inner_value;
		}

		/// 
		/// <param name="val"></param>
		public bool BoolExpression(Func<string, string> source)
        {
			var expr = CalcExpression(source);
			if (expr.Contains("@"))
			    return false;
			bool.TryParse(expr, out var result);
			return result;
		}

		public string inner_value{
			get;
			set;
		}

	}//end Label

}//end namespace FD.Tiny.FormBuilder