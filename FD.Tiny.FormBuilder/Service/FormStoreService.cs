///////////////////////////////////////////////////////////
//  FormStoreService.cs
//  Implementation of the Class FormStoreService
//  Generated by Enterprise Architect
//  Created on:      22-10ÔÂ-2018 10:46:58
//  Original author: drago
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using AutoMapper;
using FD.Tiny.FormBuilder;
namespace FD.Tiny.FormBuilder {
	public class FormStoreService : BaseService<FormStorePO> {

		/// 
		/// <param name="repository"></param>
		public FormStoreService(IRepository<FormStorePO> repository): base(repository){

		}

		/// 
		/// <param name="store"></param>
		/// <param name="userId"></param>
		public int AddFormStore(FormStore store, int userId){

			var formStorePo = Mapper.Map<FormStore, FormStorePO>(store);
			Repository.Add(formStorePo, userId);
			return formStorePo.STORE_ID;
		}

		/// 
		/// <param name="store"></param>
		/// <param name="userId"></param>
		public void SaveFormStore(FormStore store, int userId){

			var formStorePo = Mapper.Map<FormStore, FormStorePO>(store);
			Repository.Update(formStorePo, userId);
		}

		/// 
		/// <param name="storeId"></param>
		public void DelFormStore(int storeId){

			var formStorePo = Repository.FindSingle(r => r.STORE_ID == storeId);
			Repository.SoftDelete(formStorePo, storeId);
		}

		/// 
		/// <param name="storeId"></param>
		public FormStore GetFormStore(int storeId){

			var formStorePo = Repository.FindSingle(r => r.STORE_ID == storeId);
			return Mapper.Map<FormStorePO, FormStore>(formStorePo);
		}        

	}//end FormStoreService

}//end namespace FD.Tiny.FormBuilder