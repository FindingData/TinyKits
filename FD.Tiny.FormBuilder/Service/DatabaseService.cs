///////////////////////////////////////////////////////////
//  DatabaseService.cs
//  Implementation of the Class DatabaseService
//  Generated by Enterprise Architect
//  Created on:      29-9ÔÂ-2018 16:15:37
//  Original author: drago
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using AutoMapper;
using System.Data.Entity;
using System.Linq;
using FD.Tiny.FormBuilder;
namespace FD.Tiny.FormBuilder {
	public class DatabaseService : BaseService {

		/// 
		/// <param name="dbContext"></param>
		public DatabaseService(FormBuilderContent dbContext): base(dbContext){

		}

		/// 
		/// <param name="table"></param>
		/// <param name="userId"></param>
		public int AddDbTable(DbTable table, int userId){

			var tb = Mapper.Map<DbTable, DbTablePO>(table);
			tb.CREATED_BY = userId;
			_dbContext.Tables.Add(tb);
			_dbContext.SaveChanges();
			return (int)tb.TABLE_ID;
		}

		/// 
		/// <param name="column"></param>
		/// <param name="userId"></param>
		public int AddDbColumn(DbColumn column, int userId){

			var col = Mapper.Map<DbColumn, DbColumnPO>(column);
			col.CREATED_BY = userId;
			_dbContext.Columns.Add(col);
			_dbContext.SaveChanges();
			return (int)col.COLUMN_ID;
		}

		/// 
		/// <param name="table"></param>
		/// <param name="userId"></param>
		public void SaveDbTable(DbTable table, int userId){

			var tb = Mapper.Map<DbTable, DbTablePO>(table);
			tb.MODIFIED_BY = userId;
			tb.MODIFIED_TIME = DateTime.Now;
			_dbContext.Tables.Attach(tb);
			_dbContext.SaveChanges();
		}

		/// 
		/// <param name="column"></param>
		/// <param name="userId"></param>
		public void SaveDbColumn(DbColumn column, int userId){

			var col = Mapper.Map<DbColumn, DbColumnPO>(column);
			col.MODIFIED_BY = userId;
			col.MODIFIED_TIME = DateTime.Now;
			_dbContext.Columns.Attach(col);
			_dbContext.SaveChanges();
		}

		/// 
		/// <param name="tableId"></param>
		/// <param name="userId"></param>
		public void DelDbTable(int tableId, int userId){

			var table = _dbContext.Tables.Find(tableId);
			table.IS_DELETED = 1;
			table.MODIFIED_BY = userId;
			table.MODIFIED_TIME = DateTime.Now;
			_dbContext.SaveChanges();
		}

		/// 
		/// <param name="columnId"></param>
		/// <param name="userId"></param>
		public void DelDbColumn(int columnId, int userId){

			var col = _dbContext.Columns.Find(columnId);
			col.IS_DELETED = 1;
			col.MODIFIED_BY = userId;
			col.MODIFIED_TIME = DateTime.Now;
			_dbContext.SaveChanges();
		}

		/// <summary>
		///
		/// </summary>
		/// <param name="schemal"></param>
		public List<DbTable> QueryDbTable(string schemal){

			var tables = _dbContext.Tables.Where(t => t.SCHEMA_NAME.Equals(schemal)).ToList();
			var list = Mapper.Map<List<DbTablePO>, List<DbTable>>(tables);
			return list;
		}

        /// 
        /// <param name="tableId"></param>
        public List<DbColumn> GetTableColumns(int tableId)
        {
            var columns = _dbContext.Columns.Where(c => c.TABLE_ID == tableId).ToList();
            var list = Mapper.Map<List<DbColumnPO>, List<DbColumn>>(columns);
            return list;
        }

	}//end DatabaseService

}//end namespace FD.Tiny.FormBuilder